package org.example.test0710;

public class 자비기초용어모음 {
/*



    접근제한자
    : 클래스 간의 보안

    - **public**: 모두가 사용할수 있음.
    - **protected**: 상속 관계에서만 쓸 수 있음.
    - **default**: 같은 패키지 안이라면 사용 가능.
    - **private**: 클래스 안에서만 사용 가능.

    static
    : 공통적으로 쓸 수 있는 정적인 키워드.

    - **static 변수**: 클래스 내에서 공통적으로 쓸 수 있는 변수.

    - **static 메서드**: 인스턴스화 없이 바로 쓸수 있음. 클래스명.메서드명();.

    final
    : 고정적으로 변하지 않는 키워드.

    - **final 변수**: 상수. 값이 입력되면 바뀌지않음.
    - **final 메서드**: 메서드안에 값이 입력되면 고정으로 바뀜, 오버라이딩 불가. 재정의 하지 못함.
    - **final 클래스**: 상속 불가.

    super VS this

    - **this**: 클래스의 변수명와 메서드의 매개변수 이름이 같을때
                식별하기 위한 장치. this가 붙으면 클래스의 변수명.
    - **super**: 부모 클래스 호출.

    오버로딩(Overloading) vs 오버라이딩(Overriding)

    - **오버로딩**: (데이터 타입 또는 매개변수의 수)가 다르고 메서드 명이 같다면 사용 가능.
    - **오버라이딩**: 부모 클래스에서 자식 클래스로 상속 받을때 부모 클래스에 있는 메서드을 재정의.

    abstract
    :추상화.

    - **abstract 클래스**: 직접 구현 할수 없고 틀만 잡는 클래스, |추상 메서드 사용 가능 X         |
                                                          |보다는 반드시 한개는 있어야 한다! O|
    - **abstract 메서드**: 메서드를 만들수는 있지만 구현 할 수 없고 지식 클래스로
                          인해 메서드를 재정의 해서 쓸수 있음.

    interface VS abstract class

    - **interface**:      약속하는 클래스 다중 상속 가능, default 접근제한자를 꼭 쓰고 구현 가능,
                          static도 가능, 추상메서드와, final로만 만 구성
    - **abstract class**: 추상적인 클래스 다중 상속 불가.

    extends VS implements

    - **extends**: 클래스와 클래스간의 상속, 인터페이스와 인터페이스의 상속, 같은 클래스일때 쓰는 키워드.
    - **implements**: 클래스가 인터페이스를 상속 할려고 할때 쓰는 키워드.

    try-catch-finally

    - **try**: catch랑 항상 같이 씀. 런타임 예외를 내지 않게 예외를 잡아내는 키워드.
               잡은 즉시 밑의 구현한것을 무시하고 catch로 이동
    - **catch**: try랑 항상 같이 씀. try에서 잡은 예외를 catch로 보내 사용자가
                 볼수 있게 하고 정상적인 흐름으로 만듬. 여러 개 생성 가능.
    - **finally**: 예외가 없더라도 항시 finally 안에서 구현한것을 보여주는 키워드.

 */

}


