이상은

### 🔹Java 기초 문법 (1~6)

1. `public static void main(String[] args)`에서 `static`이 필요한 이유는?

공통적으로 쓰기 위해, 인스턴트화 없이 바로 불러오기


2. 지역 변수와 인스턴스 변수의 차이를 설명하시오.

지역변수는 그 안에서만 쓸 수 있는 변수

인스턴스 변수는 값이 바뀔 수 있는 변수


3. `switch` 문에서 사용 가능한 타입은 무엇인가요?

int, String


4. `for-each` 반복문과 일반 `for` 반복문의 차이는?

간편한 코드 구현와 전체 조회 기능


5. Java에서 null 체크를 안전하게 처리하는 방법은?

try-catch 


6. 접근 제어자(`private`, `default`, `protected`, `public`)의 접근 범위를 비교해서 설명하시오.

private은 해당 클래스 안에서만 사용 가능

default 같은 패키지 안이라면 가능

protected 같은 패키지 안라면 가능, 상속을 받는 경우

public 아무대서나 누구나 사용 가능


---

### 🔹 객체지향 프로그래밍 (OOP) (7~14)

1. 캡슐화(encapsulation)란 무엇이며, 왜 필요한가요?

안전하게 보호하기 위해서 


2. 상속(inheritance)을 사용할 때 주의해야 할 점은?

하나만 상속 가능

@Override 써주기


3. 오버로딩과 오버라이딩의 차이는?

오버로딩: 메서드명은 같은데 타입이나 매개변수의 개수가 다를때

오버라이딩: 부모로부터 물려 받은 것을 재정의 할때


4. 추상 클래스와 인터페이스의 차이를 설명하시오.

추상 메서드: 추상메서드를 하나 이상 반드시 해야함

인터페이스: 상수와 추상메서드만 사용 가능
defult나 stataic도 사용 가능


5. 다형성(polymorphism)을 활용한 코드 예시는?

class 과목 {
void 책이름();
}

class 수학 extands 과목{
@Override
void 책이름() {
System.out.println("수학책 입니다")
}


6. final 클래스와 final 메소드의 의미는?

클래스: 상속할 수 없음

메소드:  오버라이딩 불가


7. 객체의 생성 순서 (필드 초기화, 생성자 호출, 블록 실행 순서)를 설명하세요.

필드 초기화 후 

생성자를 만들고
this로 정의 해주고

메인메서드에 
생성자를 호출하면 필드에 값이 들어감.


8. 생성자에서 `this()`와 `super()`는 어떤 상황에서 사용하나요?

this(): 매개변수가 필드명이랑 같을때 구분하기 위해

super(): 부모 클래스의 필드명을 불러올때 


### 🔹컬렉션 및 제네릭 (15~18)

1. `List`, `Set`, `Map`의 핵심 차이점을 1줄씩 설명하세요.

list: 중복 O, 순서 O
set: 중복 X, 순서 X
map: 키값과 벨류값이 있음 중복 X, 순서 X 하지만 벨류값는 중복 가능


2. 제네릭을 사용하는 이유와 장점은 무엇인가요?

내가 쓸 타입이나 클래스명이 고민될 떄
그리고 타입으로 인한 오류를 잡아줌

장점: 제네릭을 사용하면 다른 타입들끼리 자유로우며
한 메서드를 다른 클래스로 연동 가능
EX) list<T> void arr()  ㅡ> list<Book> or list<Cook>

3. 와일드카드(`<?>`, `<? extends T>`, `<? super T>`)는 언제 사용하나요?

<?> Object 타입 add 불가능 조회만 가능

<? extends T>: 하위 클래스 일때 T를 쓸수 있다.

<? super T>: 상위 클래스 일때 T를 쓸수 있다.


4. `Comparator`를 람다식으로 사용하는 예시를 작성하세요.

aaa(int a, int b)

return a+ b;

aaa(a, b -> a+b);


---

### 🔹 예외 처리와 자바 내부 구조 (19~24)

1. 예외 처리 키워드 4가지는 무엇이며, 각각의 역할은?

try: 안에 예외가 발생하면 잡아주는 역할
catch: try에서 잡은 예외를 출력 해주는 역할
finally: 예외가 발생하더라도 실행되는 역할
throw 예외가 발생하면 메시지를 만들어 출력해주는 역할


2. 사용자 정의 예외(Custom Exception)는 언제 사용하는가요?

자바 내에 있는 예외를 상속하여 내가 보기 편하도록
재정의해서  예외 처리 메서드를 쓰고 싶을때


3. `throws`와 `throw`의 차이는 무엇인가요?

throws 는 클래스 옆에 쓰는것 전체적으로 예외를 잡아줌

throw는 try 안에 문장 안에 쓸때


4. `try-with-resources` 문법이 필요한 이유는?



5. JVM의 메모리 구조에서 스택과 힙의 차이점은?



6. `String`이 immutable(불변)한 이유는?

String은 int나 char 등과  다르게 null값이 허용.


---

### 🔹 실무 응용 / Java 8+ (25~30)

1. 람다 표현식으로 리스트 필터링을 구현하는 기본 예제를 보여주세요.
.tream()
.filter()
.map()
.collect();



2. `Optional`을 사용하는 이유와 기본 사용법은?

null인지 아닌지 확인 하기 위해

그리고 null이라면 elsethrow로 메세지 출력


3. `Stream API`에서 `map`과 `filter`의 차이점은?

필터는 찾고 싶은게 있을때
맵은 정렬을 할때


4. `Stream API`에서 `reduce()` 메서드의 역할은 무엇이며, 합계를 구하는 예제를 작성해보세요.



5. `collect()` 메서드는 어떤 용도로 사용되며, `Collectors.toList()`와 함께 쓰는 예시를 작성해보세요.

주소값을 복사하여 안전하게 조회 가능

 foreach(System.out::println)


6. `forEach()`와 `map()`의 차이점을 설명하고, 각각을 사용하는 상황을 예시와 함께 설명해보세요.

forEach는 맨 마지막에 전체를 조회할때 쓰고
map은 전체를 조회하기 전 정렬을 하기 위해 쓰임

.stream()
.map(() -> asd;)
.collect(Collectors.tolist());

.foreach(System.out::println);


보충수업 꼭 받겠습니다.. ㅠㅠ
