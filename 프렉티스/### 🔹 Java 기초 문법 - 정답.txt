## 🔹 Java 기초 문법 (1~6)

1. **`public static void main(String[] args)`에서 `static`이 필요한 이유는?**
    
    👉 객체 생성 없이 JVM이 직접 실행할 수 있도록 하기 위함입니다.
    
2. **지역 변수와 인스턴스 변수의 차이를 설명하시오.**
    
    👉 지역 변수는 메서드 내에서 선언되고, 인스턴스 변수는 클래스에 소속되어 객체가 소멸할 때까지 유지됩니다.
    
3. **`switch` 문에서 사용 가능한 타입은 무엇인가요?**
    
    👉 `byte`, `short`, `char`, `int`, `enum`, `String`(Java 7 이상), 해당 Wrapper 타입
    
4. **`for-each` 반복문과 일반 `for` 반복문의 차이는?**
    
    👉 `for-each`는 요소만 순회 가능하며 인덱스 접근이 불가능하고, 일반 `for`는 인덱스 조작이 가능합니다.
    
5. **Java에서 null 체크를 안전하게 처리하는 방법은?**
    
    👉 `if (obj != null)` 또는 `Optional.ofNullable(obj)` 사용
    
6. **접근 제어자(`private`, `default`, `protected`, `public`)의 접근 범위를 비교하시오.**
    
    👉
    
- `private`: 클래스 내부
- `default`: 동일 패키지
- `protected`: 동일 패키지 + 자식 클래스
- `public`: 어디서든 접근 가능

---

## 🔹 객체지향 프로그래밍 (7~14)

1. **캡슐화(encapsulation)란 무엇이며, 왜 필요한가요?**
    
    👉 내부 데이터 보호 및 변경 제한을 위해 필드를 private으로 숨기고, public 메서드로 접근합니다.
    
2. **상속(inheritance)을 사용할 때 주의해야 할 점은?**
    
    👉 강한 결합, 다중 상속 금지, 설계 상의 유연성 부족 등에 주의해야 합니다.
    
3. **오버로딩과 오버라이딩의 차이는?**
    
    👉
    
- 오버로딩: 메서드 이름 같고 매개변수 다름
- 오버라이딩: 부모 메서드 재정의
1. **추상 클래스와 인터페이스의 차이를 설명하시오.**
    
    👉
    
- 추상 클래스: 상태 + 기능 제공, 단일 상속
- 인터페이스: 기능만 선언, 다중 구현 가능
1. **다형성(polymorphism)을 활용한 코드 예시는?**

```java
Animal a = new Dog();  // 부모 타입으로 자식 객체 참조
a.sound();             // 실제 동작은 Dog의 sound()
```

1. **final 클래스와 final 메소드의 의미는?**
    
    👉
    
- `final 클래스`: 상속 불가
- `final 메서드`: 오버라이딩 불가
1. **객체의 생성 순서 (필드 초기화 → 생성자 호출 → 블록 실행 순서)**
    
    👉 필드 → 초기화 블록 → 생성자 순으로 실행됨
    
2. **`this()`와 `super()`는 어떤 상황에서 사용하는가?**
    
    👉
    
- `this()`: 같은 클래스의 다른 생성자 호출
- `super()`: 부모 클래스 생성자 호출

---

## 🔹 컬렉션 및 제네릭 (15~18)

1. **`List`, `Set`, `Map`의 핵심 차이점을 1줄씩 설명하세요.**
    
    👉
    
- List: 순서 있음, 중복 허용
- Set: 순서 없음, 중복 제거
- Map: 키-값 쌍 저장, 키 중복 불가
1. **제네릭을 사용하는 이유와 장점은 무엇인가요?**
    
    👉 컴파일 시 타입 안정성 확보, 형변환 없이 객체 처리 가능
    
2. **와일드카드(`<?>`, `<? extends T>`, `<? super T>`)는 언제 사용하나요?**
    
    👉
    
- `<?>`: 타입 모를 때
- `<? extends T>`: 읽기 전용
- `<? super T>`: 쓰기 전용
1. **`Comparator`를 람다식으로 사용하는 예시를 작성하세요.**

```java
list.sort((a, b) -> a.getAge() - b.getAge());
```

---

## 🔹 예외 처리와 자바 내부 구조 (19~24)

1. **예외 처리 키워드 4가지는 무엇이며, 각각의 역할은?**
    
    👉
    
- `try`: 예외 발생 코드
- `catch`: 예외 처리
- `finally`: 항상 실행
- `throw`: 예외 직접 발생
1. **사용자 정의 예외(Custom Exception)는 언제 사용하는가요?**
    
    👉 특정 비즈니스 로직에서 의미 있는 오류를 명확히 전달할 때 사용
    
2. **`throws`와 `throw`의 차이는 무엇인가요?**
    
    👉
    
- `throws`: 예외를 호출자에게 전달
- `throw`: 예외 객체를 직접 발생시킴
1. **`try-with-resources` 문법이 필요한 이유는?**
    
    👉 AutoCloseable 객체를 자동으로 닫아 리소스 누수 방지
    
2. **JVM의 메모리 구조에서 스택과 힙의 차이점은?**
    
    👉
    
- 스택: 메서드 호출과 지역 변수 저장
- 힙: 객체 인스턴스 저장
1. **`String`이 immutable(불변)한 이유는?**
    
    👉 보안, 캐싱, 동기화 안정성을 위해 변경 불가능하게 설계됨
    

---

## 🔹 실무 응용 / Java 8+ (25~30)

1. **람다 표현식으로 리스트 필터링을 구현하는 기본 예제를 보여주세요.**

```java
list.stream().filter(s -> s.length() > 3).forEach(System.out::println);
```

1. **`Optional`을 사용하는 이유와 기본 사용법은?**
    
    👉 null 방지용 도구
    

```java
Optional.ofNullable(obj).orElse("기본값");
```

1. **`Stream API`에서 `map`과 `filter`의 차이점은?**
    
    👉
    
- `map`: 요소 변환
- `filter`: 조건에 맞는 요소만 추출
1. **`reduce()`의 역할과 예제는?**
    
    👉 누적 계산
    

```java
int sum = list.stream().reduce(0, Integer::sum);
```

1. **`collect()`와 `Collectors.toList()` 예시?**

```java
List<Integer> result = list.stream().filter(x -> x > 10).collect(Collectors.toList());
```

1. **`forEach()` vs `map()` 차이점?**
    
    👉
    
- `forEach()`: 소비(출력) 목적
- `map()`: 변환 후 새로운 스트림 생성